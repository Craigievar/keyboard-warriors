/* App.css */
/* General body styles */
body {
  background-color: #232222;
  color: #232323;
  font-family: Arial, sans-serif;
  text-align: center; /* Center text globally */
}

/* App.css */
.view-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin: 20px auto; /* Center container horizontally */
  padding: 20px;
  border-radius: 8px;
  background-color: rgb(40, 35, 70);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: fit-content; /* Adjust width as needed */
}

/* Header styles */
h1,
h2,
h3,
h4,
h5,
h6 {
  color: #4c9b9b;
  text-align: center;
}

/* Paragraph styles */
p {
  color: rgb(185, 185, 185);
}

/* Input styles */
input {
  margin: 10px 0; /* Adds vertical spacing */
  padding: 8px;
  border: 1px solid #ddd;
  text-align: center;
  border-radius: 4px;
}

/* Button styles */
button {
  background-color: #6d6d6d;
  border: none;
  color: #242626;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 10px 0; /* Adds vertical spacing */
  cursor: pointer;
  border-radius: 5px;
}

button:hover {
  background-color: #5f9ea0;
}

.loading-circle {
  border: 5px solid #f3f3f3; /* Light grey border */
  border-top: 5px solid #3498db; /* Blue border */
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 2s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(270deg);
  }
}

@keyframes flashRed {
  0%,
  100% {
    color: initial;
  }
  50% {
    color: red;
  }
}

.flashing-text {
  animation: flashRed 1s infinite;
}

.popup-message {
  position: fixed; /* or absolute, depending on the requirement */
  top: 80%; /* Center vertically */
  left: 50%; /* Center horizontally */
  transform: translate(-50%, -50%);
  background-color: black;
  color: white;
  padding: 10px;
  border-radius: 5px;
  z-index: 1000; /* High z-index to float above other elements */
  animation: driftUp 3s ease-in-out forwards;
}

@keyframes driftUp {
  0% {
    top: 50%;
    opacity: 1;
  }
  30% {
    top: 35%;
    opacity: 0.5;
  }
  100% {
    top: 35%; /* Adjust the drifting distance as needed */
    opacity: 0;
  }
}

@keyframes shake {
  0% {
    transform: translate(1px, 1px) rotate(0deg);
  }
  10% {
    transform: translate(-1px, -2px) rotate(-1deg);
  }
  20% {
    transform: translate(-3px, 0px) rotate(1deg);
  }
  30% {
    transform: translate(3px, 2px) rotate(0deg);
  }
  40% {
    transform: translate(1px, -1px) rotate(1deg);
  }
  50% {
    transform: translate(-1px, 2px) rotate(-1deg);
  }
  60% {
    transform: translate(-3px, 1px) rotate(0deg);
  }
  70% {
    transform: translate(3px, 1px) rotate(-1deg);
  }
  80% {
    transform: translate(-1px, -1px) rotate(1deg);
  }
  90% {
    transform: translate(1px, 2px) rotate(0deg);
  }
  100% {
    transform: translate(1px, -2px) rotate(-1deg);
  }
}

.shake {
  animation: shake 0.1s;
  animation-iteration-count: infinite;
}

@keyframes deathAnimation {
  to {
    transform: rotate(180deg);
    opacity: 0.5;
  }
}

.dead-keyboard {
  animation: deathAnimation 1s forwards;
}

.styledBox {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
}

.endgame-screen {
  background-color: black;
  border-radius: 10px;
  border: 2px solid var(--border-color, #fff); /* default color is white if not set */
  width: 600px;
  display: flex;
  flex-direction: column; /* Set the flex direction to column for vertical layout */
  padding: 20px;
  align-items: center; /* Align items horizontally in the center */
  justify-content: center; /* Space out items vertically */
  position: fixed; /* To float on top */
  top: 50%; /* Center vertically */
  left: 50%; /* Center horizontally */
  transform: translate(-50%, -50%); /* Adjust for exact centering */
  box-sizing: border-box; /* Include padding and border in the width */
}

.keyboardView {
  flex: 0 0 20%; /* Adjust this value if you add margins */
  /* Add margin if needed, e.g., margin: 5px; */
  /* Additional styling for KeyboardView */
}

.single-spin {
  animation: spin 2s linear 1; /* 2s duration, linear timing, run once */
}

.continuous-spin {
  animation: spin 2s linear infinite;
}
